// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TextIconInput /> renders icon input 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TextIconInput
    disabled="false"
    error="test"
    icon=""
    info="test"
    label="test"
    name="test"
    onChange={[MockFunction]}
    placeholder="type something"
    type="text"
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          htmlFor="test"
        >
          test
        </label>,
        <div
          className="input-group-prepend"
        >
          <span
            className="input-group-text"
            id="test"
          >
            <i
              className=""
            />
          </span>
        </div>,
        <input
          className="form-control is-invalid"
          disabled="false"
          name="test"
          onChange={[MockFunction]}
          placeholder="type something"
          type="text"
          value=""
        />,
        <small
          className="form-text text-muted"
        >
          test
        </small>,
        <div
          className="invalid-feedback"
        >
          test
        </div>,
      ],
      "className": "input-group mb-3",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test",
          "htmlFor": "test",
        },
        "ref": null,
        "rendered": "test",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <span
            className="input-group-text"
            id="test"
          >
            <i
              className=""
            />
          </span>,
          "className": "input-group-prepend",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <i
              className=""
            />,
            "className": "input-group-text",
            "id": "test",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          "type": "span",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "form-control is-invalid",
          "disabled": "false",
          "name": "test",
          "onChange": [MockFunction],
          "placeholder": "type something",
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test",
          "className": "form-text text-muted",
        },
        "ref": null,
        "rendered": "test",
        "type": "small",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test",
          "className": "invalid-feedback",
        },
        "ref": null,
        "rendered": "test",
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            htmlFor="test"
          >
            test
          </label>,
          <div
            className="input-group-prepend"
          >
            <span
              className="input-group-text"
              id="test"
            >
              <i
                className=""
              />
            </span>
          </div>,
          <input
            className="form-control is-invalid"
            disabled="false"
            name="test"
            onChange={[MockFunction]}
            placeholder="type something"
            type="text"
            value=""
          />,
          <small
            className="form-text text-muted"
          >
            test
          </small>,
          <div
            className="invalid-feedback"
          >
            test
          </div>,
        ],
        "className": "input-group mb-3",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
            "htmlFor": "test",
          },
          "ref": null,
          "rendered": "test",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <span
              className="input-group-text"
              id="test"
            >
              <i
                className=""
              />
            </span>,
            "className": "input-group-prepend",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <i
                className=""
              />,
              "className": "input-group-text",
              "id": "test",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            "type": "span",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "form-control is-invalid",
            "disabled": "false",
            "name": "test",
            "onChange": [MockFunction],
            "placeholder": "type something",
            "type": "text",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
            "className": "form-text text-muted",
          },
          "ref": null,
          "rendered": "test",
          "type": "small",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
            "className": "invalid-feedback",
          },
          "ref": null,
          "rendered": "test",
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
