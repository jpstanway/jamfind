// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SelectFieldInput /> renders select input 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SelectFieldInput
    error="test"
    info="test"
    label="test"
    name="test"
    onChange={[MockFunction]}
    options={
      Array [
        Object {
          "label": "option 1",
          "value": "1",
        },
        Object {
          "label": "option 2",
          "value": "2",
        },
        Object {
          "label": "option 3",
          "value": "3",
        },
      ]
    }
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          htmlFor="test"
        >
          test
        </label>,
        <select
          className="form-control form-control-lg is-invalid"
          id="test"
          name="test"
          onChange={[MockFunction]}
          value=""
        >
          <option
            value="1"
          >
            option 1
          </option>
          <option
            value="2"
          >
            option 2
          </option>
          <option
            value="3"
          >
            option 3
          </option>
        </select>,
        <small
          className="form-text text-muted"
        >
          test
        </small>,
        <div
          className="invalid-feedback"
        >
          test
        </div>,
      ],
      "className": "form-group",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test",
          "htmlFor": "test",
        },
        "ref": null,
        "rendered": "test",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value="1"
            >
              option 1
            </option>,
            <option
              value="2"
            >
              option 2
            </option>,
            <option
              value="3"
            >
              option 3
            </option>,
          ],
          "className": "form-control form-control-lg is-invalid",
          "id": "test",
          "name": "test",
          "onChange": [MockFunction],
          "value": "",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "option 1",
            "nodeType": "host",
            "props": Object {
              "children": "option 1",
              "value": "1",
            },
            "ref": null,
            "rendered": "option 1",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "option 2",
            "nodeType": "host",
            "props": Object {
              "children": "option 2",
              "value": "2",
            },
            "ref": null,
            "rendered": "option 2",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "option 3",
            "nodeType": "host",
            "props": Object {
              "children": "option 3",
              "value": "3",
            },
            "ref": null,
            "rendered": "option 3",
            "type": "option",
          },
        ],
        "type": "select",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test",
          "className": "form-text text-muted",
        },
        "ref": null,
        "rendered": "test",
        "type": "small",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test",
          "className": "invalid-feedback",
        },
        "ref": null,
        "rendered": "test",
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            htmlFor="test"
          >
            test
          </label>,
          <select
            className="form-control form-control-lg is-invalid"
            id="test"
            name="test"
            onChange={[MockFunction]}
            value=""
          >
            <option
              value="1"
            >
              option 1
            </option>
            <option
              value="2"
            >
              option 2
            </option>
            <option
              value="3"
            >
              option 3
            </option>
          </select>,
          <small
            className="form-text text-muted"
          >
            test
          </small>,
          <div
            className="invalid-feedback"
          >
            test
          </div>,
        ],
        "className": "form-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
            "htmlFor": "test",
          },
          "ref": null,
          "rendered": "test",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value="1"
              >
                option 1
              </option>,
              <option
                value="2"
              >
                option 2
              </option>,
              <option
                value="3"
              >
                option 3
              </option>,
            ],
            "className": "form-control form-control-lg is-invalid",
            "id": "test",
            "name": "test",
            "onChange": [MockFunction],
            "value": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "option 1",
              "nodeType": "host",
              "props": Object {
                "children": "option 1",
                "value": "1",
              },
              "ref": null,
              "rendered": "option 1",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "option 2",
              "nodeType": "host",
              "props": Object {
                "children": "option 2",
                "value": "2",
              },
              "ref": null,
              "rendered": "option 2",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "option 3",
              "nodeType": "host",
              "props": Object {
                "children": "option 3",
                "value": "3",
              },
              "ref": null,
              "rendered": "option 3",
              "type": "option",
            },
          ],
          "type": "select",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
            "className": "form-text text-muted",
          },
          "ref": null,
          "rendered": "test",
          "type": "small",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
            "className": "invalid-feedback",
          },
          "ref": null,
          "rendered": "test",
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
